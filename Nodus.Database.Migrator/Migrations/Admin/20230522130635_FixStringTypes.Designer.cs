// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nodus.Database.Migrator.Contexts;

#nullable disable

namespace Nodus.Database.Migrator.Migrations.Admin
{
    [DbContext(typeof(AdminContext))]
    [Migration("20230522130635_FixStringTypes")]
    partial class FixStringTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Nodus.Database.Models.Admin.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Feature for super admin only",
                            Name = "ManageCompanies"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Feature for company admins",
                            Name = "ManageUsers"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Feature for trips managers",
                            Name = "ManageTrips"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Feature for accountants",
                            Name = "ManageBills"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Additional feature",
                            Name = "AccessStatistics"
                        });
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEpxired")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Description = "Super admin role for admin-side workers",
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.RoleFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int")
                        .HasColumnName("FeatureID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("FeatureId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFeatures");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b3c265a-f9e1-4764-ba03-d3e93699c00f"),
                            Created = new DateTime(2023, 5, 22, 16, 6, 35, 394, DateTimeKind.Local).AddTicks(3068),
                            Email = "nodus.admin@email.com",
                            IsActive = true,
                            PasswordHash = new byte[] { 59, 45, 182, 185, 17, 55, 91, 64, 180, 232, 255, 25, 235, 92, 205, 82, 104, 189, 101, 3, 73, 191, 5, 210, 113, 51, 224, 44, 79, 60, 97, 6 },
                            PasswordSalt = new byte[] { 183, 29, 135, 171, 162, 238, 173, 104, 170, 221, 23, 141, 152, 40, 60, 60, 87, 183, 170, 41, 87, 214, 25, 41, 169, 56, 172, 149, 128, 34, 31, 191 },
                            PhoneNumber = "1234567890",
                            RoleId = -1
                        });
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Link", b =>
                {
                    b.HasOne("Nodus.Database.Models.Admin.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Role", b =>
                {
                    b.HasOne("Nodus.Database.Models.Admin.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.RoleFeature", b =>
                {
                    b.HasOne("Nodus.Database.Models.Admin.Feature", "Feature")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nodus.Database.Models.Admin.Role", "Role")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.User", b =>
                {
                    b.HasOne("Nodus.Database.Models.Admin.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Company", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Feature", b =>
                {
                    b.Navigation("RoleFeatures");
                });

            modelBuilder.Entity("Nodus.Database.Models.Admin.Role", b =>
                {
                    b.Navigation("RoleFeatures");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
